[{"content":"## Param Callbacks\n\nParam callbacks allow you to respond to and capture path segments that match\nspecific patterns or contain specific characters. Param callbacks are named \npatterns with matcher callbacks like `int` that only matches integers.\n\n### Built-In Param Callback Types\n\nThere are several built-in callback types that cover the most common URI\nsegment patterns that you will want to respond with. These types are:\n\n * `int` - Matches integers and numbers\n * `float` - Matches floating point numbers\n * `boolean` - Matches \"1\", \"true\", \"on\", and \"yes\" (based on\n   `FILTER_VALIDATE_BOOLEAN`)\n * `slug` - Matches alphanumeric URL pattern with underscores and dashes\n   (`[a-zA-Z0-9-_]`)\n * `email` - Matches valid email addresses using `FILTER_VALIDATE_EMAIL`\n\nThis example uses the `slug` param matcher to match only URL slugs. This will\nmatch URIs like `\/posts\/my-post-title` and will output `Post: my-post-title`.\n\n{% geshi 'php' %}\n$app->path('posts', function($request) use($app) {\n    $app->param('slug', function($request, $postId) use($app) {\n        return \"Post: \" . $postId;\n    });\n});\n{% endgeshi %}\n\n<div class=\"alert alert-info\">\n  The `param` method path callback will have a second argument that holds\n  the matched URI segment or other returned value (`$postId` in this example).\n<\/div>\n\n### Register a Custom Type\n\nIf you need to register your own custom param type, it's as simple as one\nmethod call with a custom name and a callback that runs the validation.\n\nThis is the callback that Bullet uses for `int` paths:\n\n{% geshi 'php' %}\n$app->registerParamType('int', function($value) {\n    return filter_var($value, FILTER_VALIDATE_INT);\n});\n{% endgeshi %}\n\n### Matching Rules\n\nIf the param callback returns boolean `true`, the attached path callback will\nbe executed and the original URI segment will be passed to the attached path\ncallback.\n\nIf the param callback returns any value (anything other than boolean `false`),\nthe attached callback will be executed, and the returned value will be passed\nto the path callback. This is useful if you want to modify the URI segment\nbefore it gets passed to the attached path callback.\n\nIf the param callback returns boolean `false` (no match), the attached path\ncallback will be skipped and never executed.\n\n\n","format":null}]