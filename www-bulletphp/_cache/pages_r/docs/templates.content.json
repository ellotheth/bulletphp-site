[{"content":"## Views, Templates, and Layouts\n\nBullet comes with full PHP template support that can be used to render basic\nPHP files as templates with some nice enhancements and features bundled in.\n\n## Configuring Templates\n\nBefore Bullet can know how to render your templates, you have to let Bullet\nknow where they are. If you want to use layouts, Bullet has to know where those\nare too. Template support can be configured with a simple array when creating\nthe main `Bullet\\App` object:\n\n{% geshi 'php' %}\n$app = new Bullet\\App(array(\n    'template' => array(\n        'path' => __DIR__ . '\/templates\/',\n        'path_layouts' => __DIR__ . '\/templates\/layout\/',\n        'auto_layout' => 'application'\n    )\n));\n{% endgeshi %}\n\nThe `auto_layout` flag, if set to a string, will automatically wrap all templates\nin a layout file of the same name if no other layout is specified. So in this\nexample, a layout file would have to exist at `src\/templates\/layout\/application.html.php`.\nIf you don't want this behavior, set the flag to boolean `false` or simply remove\nit (it is off by default).\n\n## Responding With Templates From Routes\n\nBullet has a built-in helper method `template` for rendering templates as HTTP\nresponses from routes:\n\n{% geshi 'php' %}\n$app->path('\/', function($request) use($app) {\n    return $app->template('hello', array('name' => 'World'));\n});\n{% endgeshi %}\n\nNote that you are using `return` instead of `echo` or `print`. This is an important\nfeature of Bullet. Every route should respond with a valid response type, and\nthe `Bullet\\View\\Template` object is actually a valid HTTP response that knows\nhow to render itself on-demand. This means that you are returning a template\nobject, and not a rendered chunk of content. This allows you to further\nmanipulate the response and alter it in [events](\/docs\/events) and nested\n[sub-requests](\/docs\/sub-requests), even after this route is matched and executed.\n\n## Full-Featured Example\n\nHere is a more full-featured example of template usage, just so you can see all\nthe options that are available to you. The `header` and `status` methods come\nfrom the `Bullet\\Request` object that the template object extends (a template\nis literally a form of an HTTP response in Bullet).\n\n{% geshi 'php' %}\n$app->path('\/', function($request) use($app) {\n    return $app->template('hello')\n        ->set(array('name' => 'World'))\n        ->layout('auth')\n        ->format('xml') \/\/ makes it xml.php instead of html.php\n        ->header('Content-Type', 'text\/xml')\n        ->status(200);\n});\n{% endgeshi %}\n\n### Template Contents\n\nTemplates will have local variables set that match the names of the variables\nthat are passed to them. The `->set(array('name' => 'World'))` call will make\nthe variable `$name` available inside the template.\n\n`src\/templates\/hello.html.php`\n{% geshi 'php' %}\n<p>Hello, <?php echo $name; ?>!<\/p>\n{% endgeshi %}\n\n### Layout Contents\n\nLayouts have a special variable `$yield` that holds the template content. You\ncan use this variable to render the template content inside your layout\nwherever you want it to go.\n\n`src\/templates\/layouts\/auth.html.php`\n{% geshi 'php' %}\n<html>\n<head>\n  <title>Hello World<\/title>\n<\/head>\n<body>\n  <div>\n    <?php echo $yield; ?>\n  <\/div>\n<\/body>\n<\/html>\n{% endgeshi %}\n\n## Template Blocks\n\nOften you will need to include assets like CSS and JavaScript files or other\ncontent within template files that need to be made available in layouts. Blocks\nallow you to achieve this. Content can be added to blocks using 3 different\nmethods, depending on your desired result: `content`, `append`, and `prepend`.\n\n### Template Contents\n\nTemplates can define blocks with content (without an `echo` statement) that\nwill be set in the block content and then later rendered in the layout or\nanother template that it is nested in. Note that `content` will clear any\npreviously set content, so if you want to add a stack of things to a block\nfrom several different templates, use `append` or `prepend` instead.\n\n`src\/templates\/awesome.html.php`\n{% geshi 'php' %}\n<p>I need a custom javascript on this page because it's awesome.<\/p>\n<?php $view->block('js')->content(function() { ?>\n<script type=\"text\/javascript\" src=\"http:\/\/www.cornify.com\/js\/cornify.js\"><\/script>\n<?php }); ?>\n{% endgeshi %}\n\n### Layout Contents\n\nThis layout prints the content of two blocks - one named `css` and one named\n`js`. The `css` block uses prepend with the global site styles so that the\ncontent defined here will appear before any other content added by templates.\n\n`src\/templates\/layouts\/application.html.php`\n{% geshi 'php' %}\n<html>\n<head>\n  <title>Hello World<\/title>\n  <?php echo $view->block('css')->prepend(function() { ?>\n    <style type=\"text\/css\" href=\"\/assets\/styles\/site.css\" \/>\n  <?php }); ?>\n<\/head>\n<body>\n  <div>\n    <?php echo $yield; ?>\n  <\/div>\n  <?php echo $view->block('js'); ?>\n<\/body>\n<\/html>\n{% endgeshi %}\n\nNote that the block does not have to be defined beforehand for the set content\nto be displayed. In this example, the `css` block is never used first in the\ntemplate, but the content set here will be displayed normally without errors.\n","format":null}]