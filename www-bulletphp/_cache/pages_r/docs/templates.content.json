[{"content":"## Views, Templates, and Layouts\n\nBullet comes with full PHP template support that can be used to render basic\nPHP files as templates with some nice enhancements and features bundled in.\n\n## Configuring Templates\n\nBefore Bullet can know how to render your templates, you have to let Bullet\nknow where they are. If you want to use layouts, Bullet has to know where those\nare too. Template support can be configured with a simple array when creating\nthe main `Bullet\\App` object:\n\n{% geshi 'php' %}\n$app = new Bullet\\App(array(\n    'template.cfg' => array(\n        'path' => __DIR__ . '\/templates\/',\n        'path_layouts' => __DIR__ . '\/templates\/layout\/',\n        'auto_layout' => 'application'\n    )\n));\n{% endgeshi %}\n\nThe `auto_layout` flag, if set to a string, will automatically wrap all templates\nin a layout file of the same name if no other layout is specified. So in this\nexample, a layout file would have to exist at `src\/templates\/layout\/application.html.php`.\nIf you don't want this behavior, set the flag to boolean `false` or simply remove\nit (it is off by default).\n\n## Responding With Templates From Routes\n\nBullet has a built-in helper method `template` for rendering templates as HTTP\nresponses from routes:\n\n{% geshi 'php' %}\n$app->path('\/', function($request) use($app) {\n    return $app->template('hello', array('name' => 'World'));\n});\n{% endgeshi %}\n\nNote that you are using `return` instead of `echo` or `print`. This is an important\nfeature of Bullet. Every route should respond with a valid response type, and\nthe `Bullet\\View\\Template` object is actually a valid HTTP response that knows\nhow to render itself on-demand. This means that you are returning a template\nobject, and not a rendered chunk of content. This allows you to further\nmanipulate the response and alter it in [events](\/docs\/events) and nested\n[sub-requests](\/docs\/sub-requests), even after this route is matched and executed.\n\n## Full-Featured Example\n\nHere is a more full-featured example of template usage, just so you can see all\nthe options that are available to you. The `header` and `status` methods come\nfrom the `Bullet\\Request` object that the template object extends (a template\nis literally a form of an HTTP response in Bullet).\n\n{% geshi 'php' %}\n$app->path('\/', function($request) use($app) {\n    return $app->template('hello')\n        ->set(array('name' => 'World'))\n        ->layout('auth')\n        ->format('xml') \/\/ makes it xml.php instead of html.php\n        ->header('Content-Type', 'text\/xml')\n        ->status(200);\n});\n{% endgeshi %}\n\n","format":null}]