[{"content":"## Project Organization and Setup\n\nOrganizing an application using a micro-framework like Bullet can sometimes be\na challenge because there is no pre-determined or enforced structure like there\nis with larger frameworks. This gives you a lot more freedom and control, but it\nalso comes with questions about where to put certain things like configuration,\ntemplates, models, etc. and the best way to organize larger projects to maintain\na good separation of concerns.\n\nThis page is offered as the recommended\nway to setup and organize an application built on Bullet so everyone on your team\nstays sane - even if that just means you.\n\n## Folder Organization\n\nTypically, it is desireable to setup your project with a few different top-level\ndirectories that contain your different main content types. An example might be:\n\n * `assets` - All your frontend asset files like images, CSS, and javascript\n    * `images` - Image files\n    * `scripts` - JavaScript files\n    * `styles` - CSS\/Stylesheets\n * `lib` - Any custom libraries created specifically for this project\n * `src` - All route files and anything related to this application\n    * `lang` - Language files, if using I18N\n    * `templates` - Template files\n    * `routes` - Route files\n * `test` - Tests for this application (any type)\n * `vendor` - Composer-create folder with Bullet and dependencies\n\n## Route Organization\n\nThe easiest way to organize your project is to separate all the router handlers\nfor different base routes like `posts`, `events`, and `comments` into different\nsame-named files, like `posts.php`, `events.php`, and `comments.php`. This is\nvery similar to the way you would separate and organize your code in a larger\nMVC framework with controller classes. If you are following the folder structure\nabove, these would be placed in `src\/routes`. You would then `require` these\nfiles in your main `index.php` file that serves your Bullet application.\n\nYour main index file would then look something like this:\n\n{% geshi 'php' %}\n<?php\n\/\/ Composer Autoloader\n$loader = require __DIR__ . '\/vendor\/autoload.php';\n$loader->add('Entity', __DIR__ . '\/src\/'); \/\/ Entities\n$loader->add('App', __DIR__ . '\/lib\/'); \/\/ Custom app\/lib files\n\n\/\/ Directories\n$srcDir = __DIR__ . '\/src\/';\n$routeDir = $srcDir . '\/routes\/';\n\n\/\/ Bullet App\n$app = new Bullet\\App(require $srcDir . 'config.php');\n$request = new Bullet\\Request();\n\n\/\/ Common include (db connection, setup, common objects, etc.)\nrequire $srcDir . '\/common.php';\n\n\/\/ Require all paths\/routes\nrequire $routeDir . 'index.php';\nrequire $routeDir . 'events.php';\nrequire $routeDir . 'posts.php';\nrequire $routeDir . 'users.php';\n\n\/\/ Response\necho $app->run($request);\n{% endgeshi %}\n\nSo just like larger frameworks that have full MVC structures and controllers,\na good separation of concerns can be maintained and all the routes and\ncorresponding logic are broken up into more digestible independent files.\n\n","format":null}]